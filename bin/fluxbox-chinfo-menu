#!/bin/bash
#
#-- fluxbox-chinfo-menu --
# Menu script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ fluxbox-chinfo-menu -a
#--
# Copyright 2010-2015 Phantom X, Goiania, Brazil.
# Portions of code based on perl script by Arnaud Ab√©lard <arny@arny.org>
# Backgrounds menu code adapted from fluxbox-generate_menu by:
# Dung N. Lam <dnlam@users.sourceforge.net> and Han Boetes <han@mijncomputer.nl>
#
#       This program is free software; you can redistribute it and/or modify
#       it under the terms of the GNU General Public License as published by
#       the Free Software Foundation; either version 3 of the License, or
#       (at your option) any later version.
#       
#       This program is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#       GNU General Public License for more details.
#       
#       You should have received a copy of the GNU General Public License
#       along with this program; if not, write to the Free Software
#       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#       MA 02110-1301, USA.

# Translations only work with utf8 locales
if [ ! $(echo ${LANG} | grep -i \\.utf8) ] && [ ! $(echo ${LANG} | grep -i \\.utf-8) ]; then
  LANG=C
fi

# For gettext internationalization
export TEXTDOMAIN="fluxbox-chinfo-menu"
export TEXTDOMAINDIR="/usr/share/locale"
if [ -x /usr/bin/gettext.sh ] ;then
  . /usr/bin/gettext.sh
else
  echo "Missing /usr/bin/gettext.sh"
  exit 1
fi

tmp=$(mktemp -d)

trap cleanup EXIT
cleanup() {
  set +e
  [ -z "${tmp}" -o ! -d "${tmp}" ] || rm -rf "${tmp}"
}

set -e

FCM_VERSION=@FCM_VERSION@
FB_USERDIR="${HOME}/.fluxbox"
FB_CHINFO_FILES="/usr/share/fluxbox-chinfo-menu"
FB_CHINFO_XDG="/usr/bin/xdgmenumaker"
FB_CHINFO_CONFIG="${FB_CHINFO_FILES}/fluxbox-chinfo-menuconfig"
FB_CHINFO_USERCONFIG="${FB_USERDIR}/chinfo-menuconfig"
FB_MENUTITLE="$(fluxbox -version | cut -d " " -f-2 | head -n1 )"
FB_MAINMENUNAME="menu"
FB_XDGMENUNAME="xdgmenu"
FB_XDGICONS="no"
FB_USERMENUNAME="usermenu"
FB_BGMENUNAME="bgmenu"
FB_MAINMENU="${FB_USERDIR}/${FB_MAINMENUNAME}"
FB_XDGMENU="${FB_USERDIR}/${FB_XDGMENUNAME}"
FB_USERMENU="${FB_USERDIR}/${FB_USERMENUNAME}"
FB_BGMENU="${FB_USERDIR}/${FB_BGMENUNAME}"
FB_BACKGROUND_DIRS="${FB_USERDIR}/backgrounds/:/usr/share/fluxbox/backgrounds/"
FB_PYTHON="/usr/bin/python"

unset FB_TERM FB_FILE FB_BROWSER FB_MAIL FB_XDGICONSOPT

if [ ! -x "${FB_CHINFO_XDG}" ] ;then
  FB_CHINFO_XDG_BN=$(basename ${FB_CHINFO_XDG})
  eval_gettext '${FB_CHINFO_XDG_BN} is not installed!' ;echo
  exit 1
fi

if [ ! -x "${FB_PYTHON}" ] ;then
  FB_PYTHON_BN=$(basename ${FB_PYTHON})
  eval_gettext '${FB_PYTHON_BN} is not installed!' ;echo
  exit 1
fi

mkdir -p "${FB_USERDIR}"

if [ -r "${FB_CHINFO_USERCONFIG}" ] ;then
  source "${FB_CHINFO_USERCONFIG}"
else
  echo "${FB_CHINFO_CONFIG} > ${FB_CHINFO_USERCONFIG}"
  cp -f "${FB_CHINFO_CONFIG}" "${FB_CHINFO_USERCONFIG}"
  source "${FB_CHINFO_USERCONFIG}"
fi

fcmcommand="$0"

txt() {
eval_gettext 'Usage : ${fcmcommand} <parameter>
Generate menus for fluxbox.

<parameter> can be:
  -a|--all         Generate all menus
  -b|--bgmenu      Generate only background menu
  -m|--mainmenu    Generate only main menu
  -x|--xdgmenu     Generate only XDG menu
  -h|--help        This message
  -v|--version     Output version

Run without any parameters to only generate ${FB_CHINFO_USERCONFIG}.'
echo
}

# Remove unwanted strings on desktop Exec commands
submenuclean(){
  sed -r \
    -e 's: (%F|%f|%i|%m|"%c"|%c|%u|%U|-o|-caption "|-caption)::g' \
    -i $1
}

xdgmenu(){
  if [ "${FB_XDGICONS}" = "yes" ] ;then
    eval_gettext 'Generating ${FB_XDGMENU} with icons...' ;echo
    FB_XDGICONSOPT='-i'
  else
    eval_gettext 'Generating ${FB_XDGMENU}...' ;echo
  fi
  "${FB_PYTHON}" "${FB_CHINFO_XDG}" ${FB_XDGICONSOPT} -f fluxbox 2>/dev/null > "${tmp}/${FB_XDGMENUNAME}" || exit 1
  submenuclean "${tmp}/${FB_XDGMENUNAME}"
  cp -f "${tmp}/${FB_XDGMENUNAME}" "${FB_XDGMENU}"
}

# Tests if command exists and are executable
find_exec(){
  COMMAND=$(which $(echo $3 | cut -d" " -f1) 2>/dev/null) || :
  if [ -n "${COMMAND}" ] && [ -x "${COMMAND}" ] ;then
    echo "$1[exec] ($2) {$3}" >> "${FB_MAINMENU_TMP}"
  fi
}

# Tests if wm command exists and are executable
find_wm(){
  COMMAND=$(which $(echo $3 | cut -d" " -f1) 2>/dev/null) || :
  if [ -n "${COMMAND}" ] && [ -x "${COMMAND}" ] ;then
    echo "$1[restart] ($2) {$3}" >> "${FB_MAINMENU_TMP}"
  fi
}

# Adds backgrounds to menu
addbackground(){
  picturename=$(basename "$1")
  echo "			[exec] (${picturename%.???}) {fbsetbg -a \"$1\" }" >> "${FB_BGMENU_TMP}"
}

# Assemble the bgmenu
bgmenu(){
  [ "${FB_BGMENU}" = "none" ] && return 1
  [ -f "${FB_BGMENU}" ] && mv -f "${FB_BGMENU}" "${FB_BGMENU}.old"
  eval_gettext 'Generating ${FB_BGMENU}...';echo
  FB_BGMENU_TMP="${tmp}/${FB_BGMENUNAME}"
  IFS=: # set delimetor for find
  NUMBER_OF_BACKGROUNDS=$(find ${FB_BACKGROUND_DIRS} -follow -type f \( -iname '*.png' -o -iname '*.jpg' -o -iname '*.xpm' -o -iname '*.bmp' -o -name '*.gif' -o -iname '*.tiff' \) 2> /dev/null|wc -l)
  if [ "${NUMBER_OF_BACKGROUNDS}" -gt 0 ]; then
    echo "	[submenu] ($(eval_gettext 'Backgrounds')) {$(eval_gettext 'Set the Background')}" >> "${FB_BGMENU_TMP}"
    echo "		[exec] ($(eval_gettext 'Random Background')) {fbsetbg -r ${USERFLUXDIR}/backgrounds}" >> "${FB_BGMENU_TMP}"
    if [ "${NUMBER_OF_BACKGROUNDS}" -gt 30 ]; then
      menucounter=1 ; counter=1
      if [ "$(echo -n ${menucounter} | wc -c)" -eq 1 ] ;then
        rmenucounter=0${menucounter}
        [ "${menucounter}" -eq 1 ] && rmenucounter=" 0${menucounter}"
      else
        rmenucounter=${menucounter}
      fi
      echo "		[submenu] ($(eval_gettext 'Backgrounds ${rmenucounter}')) {$(eval_gettext 'Set the Background')}" >> "${FB_BGMENU_TMP}"
      find ${FB_BACKGROUND_DIRS} -follow -type f \( -iname '*.png' -o -iname '*.jpg' -o -iname '*.xpm' -o -iname '*.bmp' -o -name '*.gif' -o -iname '*.tiff' \) 2> /dev/null | sort | while read i; do
        counter=$(expr $counter + 1)
        if [ ${counter} -eq 30 ]; then
          counter=1
          menucounter=$(expr ${menucounter} + 1)
          if [ "$(echo -n ${menucounter} | wc -c)" -eq 1 ] ;then
            rmenucounter=0${menucounter}
            [ "${menucounter}" -eq 1 ] && rmenucounter=" 0${menucounter}"
          else
            rmenucounter=${menucounter}
          fi
          echo '		[end]' >> "${FB_BGMENU_TMP}"
          echo "		[submenu] (${BACKGROUNDMENU}${rmenucounter}) {$(eval_gettext 'Set the Background')}" >> "${FB_BGMENU_TMP}"
        fi
        addbackground "$i"
      done
      echo '		[end]' >> "${FB_BGMENU_TMP}"
    else
      find ${FB_BACKGROUND_DIRS} -follow -type f \( -iname '*.png' -o -iname '*.jpg' -o -iname '*.xpm' -o -iname '*.bmp' -o -name '*.gif' -o -iname '*.tiff' \) 2> /dev/null | sort | while read i; do
        addbackground "$i"
      done
    fi
    echo '	[end]' >> "${FB_BGMENU_TMP}"
    cp -f "${FB_BGMENU_TMP}" "${FB_BGMENU}"
  else
    eval_gettext 'Warning: None background found in:' ;echo
    echo "${FB_BACKGROUND_DIRS}" >&2
  fi
}

mainmenu(){
  [ -f "${FB_MAINMENU}" ] && cp -f "${FB_MAINMENU}" "${FB_MAINMENU}.old"
  eval_gettext 'Generating ${FB_MAINMENU}...' ; echo

  FB_MAINMENU_TMP="${tmp}/${FB_MAINMENUNAME}"

  echo "[begin] (${FB_MENUTITLE})" > "${FB_MAINMENU_TMP}"
  [ "${FB_TERM}" ] && find_exec "" "$(eval_gettext 'Terminal')" "${FB_TERM}"
  [ "${FB_FILE}" ] && find_exec "" "$(eval_gettext 'File Manager')" "${FB_FILE}"
  [ "${FB_BROWSER}" ] && find_exec "" "$(eval_gettext 'Web Browser')" "${FB_BROWSER}"
  [ "${FB_MAIL}" ] && find_exec "" "$(eval_gettext 'Email Reader')" "${FB_MAIL}"
  echo '[separator]' >> "${FB_MAINMENU_TMP}"
  [ -f "${FB_XDGMENU}" ] && echo "	[include] (${FB_XDGMENU})" >> "${FB_MAINMENU_TMP}"
  [ -f "${FB_USERMENU}" ] && echo "	[include] (${FB_USERMENU})" >> "${FB_MAINMENU_TMP}"

  if [ -f "${FB_XDGMENU}" ] || "${FB_USERMENU}"  ;then
    echo "[separator]" >> "${FB_MAINMENU_TMP}"
  fi
  cat >> "${FB_MAINMENU_TMP}" <<EOF
[submenu] ($(eval_gettext 'Fluxbox Menu'))
	[config] ($(eval_gettext 'Configure'))
	[submenu] ($(eval_gettext 'System Styles')) {$(eval_gettext 'Choose a style...')}
		[stylesdir] (/usr/share/fluxbox/styles)
	[end]
	[submenu] ($(eval_gettext 'User Styles')) {$(eval_gettext 'Choose a style...')}
		[stylesdir] (~/.fluxbox/styles)
	[end]
EOF

 [ -f "${FB_BGMENU}" ] && echo "	[include] (${FB_BGMENU})" >> "${FB_MAINMENU_TMP}"
  echo "	[workspaces] ($(eval_gettext 'Workspace List'))" >> "${FB_MAINMENU_TMP}"
  echo "	[submenu] ($(eval_gettext 'Tools'))" >> "${FB_MAINMENU_TMP}"
  find_exec "		" "Fluxconf" "fluxconf"
  find_exec "		" "Fluxkeys" "fluxkeys"
  find_exec "		" "Fluxmenu" "fluxmenu"
  find_exec "		" "$(eval_gettext 'GTK+ appearence')" "lxappearance"
  if which "zenity" &>/dev/null ;then
    find_exec "		" "$(eval_gettext 'Window name')" "zenity --info --text=\"\$(xprop WM_CLASS|cut -d \\\" -f 2)\" --title=\"$(eval_gettext 'Window name')\""
    find_exec "		" "$(eval_gettext 'Window info')" "zenity --info --text=\"\$(xwininfo)\" --title=\"$(eval_gettext 'Window info')\""
  elif which "Xdialog" &>/dev/null ;then
    find_exec "		" "$(eval_gettext 'Window name')" "Xdialog --title \"$(eval_gettext 'Window name')\" --infobox \"\$(xprop WM_CLASS|cut -d \\\" -f 2)\" 5 20 0"
    find_exec "		" "$(eval_gettext 'Window info')" "Xdialog --title \"$(eval_gettext 'Window info')\" --infobox \"\$(xwininfo)\" 40 100 0"
  elif which "xmessage" &>/dev/null ;then
    find_exec "		" "$(eval_gettext 'Window name')" "xprop WM_CLASS|cut -d \\\" -f 2 | xmessage -file - -center"
    find_exec "		" "$(eval_gettext 'Window info')" "xwininfo | xmessage -file - -center"
  fi
  find_exec "		" "$(eval_gettext 'Screenshot')" "import \${TMP}/fluxbox-screenshot-$(whoami).png && display -resize 50% \${TMP}/fluxbox-screenshot-$(whoami).png"
   cat >> "${FB_MAINMENU_TMP}" <<EOF
		[submenu] ($(eval_gettext 'Regenerate menus'))
			[exec] ($(eval_gettext 'All')) {fluxbox-chinfo-menu -a}
			[exec] ($(eval_gettext 'Only main menu')) {fluxbox-chinfo-menu -m}
			[exec] ($(eval_gettext 'Only XDG menu')) {fluxbox-chinfo-menu -x}
			[exec] ($(eval_gettext 'Only backgrounds menu')) {fluxbox-chinfo-menu -b}
		[end]
	[end]
	[submenu] ($(eval_gettext 'Window Managers'))
EOF

  for wm in beryl blackbox compiz enlightenment evilwm fvwm fvwm2 icewm ion metacity mwm openbox pekwm sawfish twm waimea wmaker wmii ; do
    find_wm "		" "${wm}" "start${wm}"
  done
  for wm in e16 kde lxde metisse xfce4; do
    find_wm "		" "${wm}" "start${wm}"
  done
  find_wm "		" "gnome" "gnome-session"

cat >> "${FB_MAINMENU_TMP}" <<EOF
	[end]
	[commanddialog] ($(eval_gettext 'Fluxbox Command'))
	[separator]
	[reconfig] ($(eval_gettext 'Reload config'))
	[restart] ($(eval_gettext 'Restart Fluxbox'))
[end]
[separator]
EOF

  find_exec "" "$(eval_gettext 'Run...')" "fbrun -title '$(eval_gettext 'Run...')' ${FB_FBRUNOPTIONS}"
  echo "[separator]" >> "${FB_MAINMENU_TMP}"
  if which "kfind" &>/dev/null || which "khelpcenter" &>/dev/null \
    || which "gnome-search-tool" &>/dev/null || which "yelp" &>/dev/null ;then
    echo "	[submenu] ($(eval_gettext 'Help & Search'))" >> "${FB_MAINMENU_TMP}"
    find_exec "		" "[KDE] $(eval_gettext 'Search for files...')" "kfind"
    find_exec "		" "[KDE] $(eval_gettext 'Help')" "khelpcenter"
    find_exec "		" "[GNOME] $(eval_gettext 'Search for files...')" "gnome-search-tool"
    find_exec "		" "[GNOME] $(eval_gettext 'Help')" "yelp"
    echo "	[end]" >> "${FB_MAINMENU_TMP}"
    echo "[separator]" >> "${FB_MAINMENU_TMP}"
  fi
  find_exec "" "$(eval_gettext 'Open New Session')" "fluxbox-dm-helper --new"
  echo "[separator]" >> "${FB_MAINMENU_TMP}"
  
  find_exec "" "$(eval_gettext 'Lock screen') [xlock]" "xlock"
  find_exec "" "$(eval_gettext 'Lock screen') [xscreensaver]" "xscreensaver-command -lock"
  echo "[separator]" >> "${FB_MAINMENU_TMP}"
  echo "[exit] ($(eval_gettext 'Logout'))" >> "${FB_MAINMENU_TMP}"
  echo "[separator]" >> "${FB_MAINMENU_TMP}"
  find_exec  "" "$(eval_gettext 'Reboot')" "fluxbox-dm-helper --fluxbox --reboot"
  find_exec  "" "$(eval_gettext 'Shutdown')" "fluxbox-dm-helper --fluxbox --shutdown"
  echo "[end]" >> "${FB_MAINMENU_TMP}"
  cp -f "${FB_MAINMENU_TMP}" "${FB_MAINMENU}"
}

case "$1" in
  -a|--all)
    xdgmenu
    bgmenu
    mainmenu
    ;;
  -b|--bgmenu)
    bgmenu
    ;;
  -m|--mainmenu)
    mainmenu
    ;;
  -x|--xdgmenu)
    xdgmenu
    ;;
  -v|--version)
    echo ${FCM_VERSION}
    exit 0
  ;;
  -h|*)
    txt
    ;;
esac
